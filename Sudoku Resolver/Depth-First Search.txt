#include <stdio.h>
#include <time.h> //time library
#include <sys/resource.h>  //system library for measure memory usage 
#define N 9  // Grid size

int grid[9][9] = {{0, 6, 5, 7, 0, 4, 9, 3, 1},
                  {2, 4, 3, 5, 0, 0, 0, 0, 0},
                  {0, 9, 1, 3, 8, 6, 0, 0, 0},
                  {0, 2, 0, 1, 0, 8, 0, 0, 4},
                  {1, 0, 0, 9, 0, 0, 7, 0, 2},
                  {3, 0, 0, 6, 5, 2, 8, 0, 9},
                  {0, 8, 0, 0, 0, 0, 4, 0, 0},
                  {0, 0, 7, 0, 0, 0, 0, 0, 0},
                  {0, 1, 0, 0, 6, 0, 5, 8, 3}};

// Check if a number can be placed in a particular cell
int is_valid(int row, int col, int num) {
    // Check if the number is already present in the row or column
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return 0;
        }
    }

// Check if the number is already present in the 3x3 sub-grid
    int start_row = row - row % 3;
    int start_col = col - col % 3;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[start_row + i][start_col + j] == num) {
                return 0;
            }
        }
    }

// If the number is not already present, return 1
    return 1;
}

// Solve the Sudoku puzzle using depth-first search
int solve(int row, int col) {
// If all rows and columns have been filled, the puzzle is solved
    if (row == N) {
        return 1;
    }

// If the current cell is already filled, move on to the next cell
    if (grid[row][col] != 0) {
        if (col == N - 1) {
            return solve(row + 1, 0);
        } else {
            return solve(row, col + 1);
        }
    }

// Try all possible numbers in the current cell
    for (int i = 1; i <= N; i++) {
        if (is_valid(row, col, i)) {
            grid[row][col] = i;
            if (col == N - 1) {
                if (solve(row + 1, 0)) {
                    return 1;
                }
            } else {
                if (solve(row, col + 1)) {
                    return 1;
                }
            }
            grid[row][col] = 0;
        }
    }

// If no number works, backtrack
    return 0;
}

int main() {

    clock_t start, end;
    double cpu_time_used;
    struct rusage usage;
    
    printf("Initial State :\n");
    for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", grid[i][j]);
            }
            printf("\n");
        }
        printf("\n");

    start = clock();
// Solve the puzzle
    if (solve(0, 0)) {
        // Print the solved puzzle
        printf("Solved Sudoku puzzle:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", grid[i][j]);
            }
            printf("\n");
        }
        printf("\n");
    } else {
        printf("No solution exists.\n");
    }
    end = clock();

//check program run time and memory usage
    cpu_time_used = ((double) (end - start)) / ((double)(CLOCKS_PER_SEC/1000));
    printf("Program runtime: %.4f ms\n", cpu_time_used);
    getrusage(RUSAGE_SELF, &usage);
    printf("Memory usage   : %ld bytes\n", usage.ru_maxrss);

    return 0;
}
