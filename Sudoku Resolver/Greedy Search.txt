#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/resource.h>

#define N 9
#define UNASSIGNED 0

int grid[N][N] = {
    {3, 8, 0, 9, 0, 0, 2, 0, 5},
    {0, 0, 0, 0, 0, 8, 7, 3, 0},
    {0, 6, 0, 3, 0, 0, 9, 8, 0},
    {0, 0, 0, 0, 0, 3, 5, 0, 1},
    {9, 1, 0, 5, 0, 7, 0, 2, 3},
    {7, 0, 3, 1, 0, 0, 0, 0, 0},
    {0, 3, 5, 0, 0, 1, 0, 9, 0},
    {0, 7, 4, 6, 0, 0, 0, 0, 0},
    {8, 0, 1, 0, 0, 2, 0, 6, 7}
};

int FindUnassignedLocation(int *row, int *col) {
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            if (grid[i][j] == UNASSIGNED) {
                *row = i;
                *col = j;
                return 1;
            }
        }
    }
    return 0;
}

int UsedInRow(int row, int num) {
    int i;
    for (i = 0; i < N; i++) {
        if (grid[row][i] == num) {
            return 1;
        }
    }
    return 0;
}

int UsedInCol(int col, int num) {
    int i;
    for (i = 0; i < N; i++) {
        if (grid[i][col] == num) {
            return 1;
        }
    }
    return 0;
}

int UsedInBox(int boxStartRow, int boxStartCol, int num) {
    int i, j;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            if (grid[i+boxStartRow][j+boxStartCol] == num) {
                return 1;
            }
        }
    }
    return 0;
}

int isSafe(int row, int col, int num) {
    return !UsedInRow(row, num) &&
           !UsedInCol(col, num) &&
           !UsedInBox(row - row%3, col - col%3, num);
}

int GreedySearch(int *row, int *col) {
    int i, j, min = N+1, count = 0;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            if (grid[i][j] == UNASSIGNED) {
                count = 0;
                int num;
                for (num = 1; num <= N; num++) {
                    if (isSafe(i, j, num)) {
                        count++;
                    }
                }
                if (count < min) {
                    min = count;
                    *row = i;
                    *col = j;
                }
            }
        }
    }
    return (min == N+1) ? 0 : 1;
}

int solveSudoku() {
    int row, col;
    if (!FindUnassignedLocation(&row, &col)) {
        return 1;
    }
    if (!GreedySearch(&row, &col)) {
        return 0;
    }
    int num;
    for (num = 1; num <= N; num++) {
        if (isSafe(row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku()) {
                return 1;
            }
            grid[row][col] = UNASSIGNED;
        }
    }
    return 0;
}

void printGrid() {
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
}

int main() {

	clock_t start, end;
    double cpu_time_used;
    struct rusage usage;

    start = clock();

	int i, j;

	printf("Initial state\n");
    printf("*****************\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", grid[i][j]);
        }
        printf("\n");
    }
    printf("\n");

	for (i = 0; i < N; i++) {
    	for (j = 0; j < N; j++) {
        	scanf("%d", &grid[i][j]);
    	}
	}

	if (solveSudoku()) {
    	printf("Goal State\n");
        printf("*****************\n");
    	printGrid();
	} 
    	else {
    	printf("No solution exists.");
	}

	end = clock();

    printf("\n");
    printf("Details\n");
    printf("*****************\n");
    cpu_time_used = ((double) (end - start)) / ((double)(CLOCKS_PER_SEC/1000));
    printf("Runtime: %f ms\n", cpu_time_used);
    getrusage(RUSAGE_SELF, &usage);
    printf("Memory usage: %ld bytes\n", usage.ru_maxrss);

	return 0;
    
}